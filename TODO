
- To do for 0.02:
  - Switch to latest jME
  - Get a real GUI - FengGUI most likely
  - Add textures to Shape class
    - Specify color of each triangle
    - Include image
    - Each triangle includes an image transform
  - Add WarpShape message
    - Polynomial/sin change over time, but each coefficient is a Shape
      instead of a vector or quaternion
  - Add AddRef message
    > Object id and MoveSeq
    > Creates a new object with the same shape as another object
    > Changes to the other object's shape affect referring objects
  - Client input
  - Cookies
  x Override default serialization in PointArray to guarantee that the
    protocol doesn't change due to changes in Point3d's serialization
  - Reimplement ball factory with a stack of DynPolygons
    - DynPolygon( origin, top_vector, side_vector, n_sides )
      - get(n) -> vertex of polygon
        - where n % n_sides == 0 -> origin + top_vector
        - where (n % n_sides) * 4 == n_sides -> origin + side_vector
      - Could make this iterable, no?
    > This should hopefully simplify generation of sections of a ball,
      as well as possibly being useful for other things
  - Add better logging facilities
  - Time out synchronous queries
  - Show some sort of "loading in progress" status indicator when going
    to a new URL, before the connection is fully established

------------------------------------------------------------------------
- To do for 0.03:
  - Text

------------------------------------------------------------------------
- To do for 0.99:
  - Client
    - Text -- can't escape the morass
    - Sound
    - Smoothing
    - Decide whether to build in things like feel, temperature, specific
      heat, etc
    - Figure animations (as long as a proxy can do it)
    - Sound
    - Inventory system with remote object browser integration
  - Proxy
    - Obviously these need to be loaded
    - Client asks server for permission to let proxy connect to it
  - Server
    - Darc
    - OpenID

------------------------------------------------------------------------
- Future:
  - Reestablishing a multiplexed connection after it is dropped
    - The receiver will likely reset correctly and discard any half-sent
      objects, but a sender will need to back up and retransmit
      > Right now, I think I might be discarding the sent bytes
  - Backward compatibility
    - Client should be able to ignore child classes of ProxySendable
      that it does not recognize
      > Is this just a matter of making the default case a fall-through?
  - Textures must be specifiable as URLs (?) or else they can only be
    loaded from the DVTP server, because that's all the proxy can
    connect to
  - Add support for Scheme source code proxy (using SISC)
  - Need a test that exposes that a server is not threadsafe
    - Tests can run with N threads; good values of N to test would be 1,
      2, 10, 100, maximum that will fit in memory
    - Test that a sequence of objects inserted into a NetOutQueue are
      all received at the other end
  - Switch to a better language targeting the JVM, once something mature
    emerges
    > Probably Rhino
    > Also hyped are Scala, and ... okay, nothing is as hyped as Scala,
      but maybe that's just because they all got together and ambushed
      the comments on
      http://steve-yegge.blogspot.com/2007/12/codes-worst-enemy.html
    > Maybe Jython or JRuby
    > Maybe the architecture is:
      > Java or fully Java-callable libraries
      > Other projects in other languages, at a higher level
  - Proxy: short-range chat:
    - Nearest N people (six or seven -- what a person can normally keep
      track of in conversation) appear along the bottom and scroll up,
      horizontally aligned with the person speaking (arrows for people
      off the edge of the screen)
    - In a crowd of people, speech from those further away appears above
      the horizon
    - For calculating distance, factor in the direction the speaker is
      facing (but not the listener)
    - Focus on a person makes their speech boldface?  Decreases distance
      - Press F and click?  Hover and press F?
  - Learning mode: periodically pops up hints and available commands?
  - Client: master volume control and mute button/keystroke
    > Mute icon blinks (optionally) when something is trying to make
      noise
  - Option to swap brackets and parens (so '[' key sends '(', etc.)
  - Client: prompt user if site requests resize; one option should
    defeat malicious sites that flood the user with resize requests and
    make the client unusable without killing/restarting (i.e., "Never
    for this site")
  - Client: prompt user if site requests all heads-up UI elements be
    hidden (pointing out that they can be brought back by selecting the
    menu "Interface / (Un)hide all")
  - Client: Some way to tell whether a texture has finished loading --
    few things are more annoying than standing in front of a texture,
    wondering if it is ever going to get less blocky
  - Client: any grayed-out menu item must explain why it is disabled
  - Client: boldface the hostname in the location bar
    > Could lead to confusion when on a stitched-together pass-through
      site
  - Good idea from SL: explicit affordance, such as highlighting
    clickable objects in red when the user holds down the alt key
    > Even better: auto label them with the name of the action
  - On the server side, "links" should include some metainformation
    about whom to notify when the link breaks.  This information would
    not be transmitted to clients; the client would notify the server
    that the link was broken, and the server would pass that
    notification along
    > A DvtpBrokenLinkMessage object, becoming a broken-link Darc
      message
  - iTunes-like interface for managing in-world objects and inventory
    > Ideally, there would be a single interface for both categories,
      but that raises a big question mark about how (and where) to
      implement such a thing
      > With a protocol for passing object directories around; it has to
        be done
  - Proxy-side collisions with no trust needed
    > Any proxy may report a moment and point of collision between two
      objects; the server knows the trajectories of the objects,
      verifies the collision (cheap), and calculates resulting forces
      > The same method could be used to pass this back to the client,
        if it were advantageous to use the client's world tree
    > Collision with a door non-physical object is required for crossing
      into a solid cell
    > Server could apply simplified physics in unattended areas
  - History tree(s), as suggested by
    > http://www.jacobsheehy.com/technology/browsing-the-web-with-a-tree
    - Each RedirectUrl creates a branch
    - A SetUrl starts a new tree, but with a dotted line to where the
      user was; can connect as a branch
  - Editor with syntax highlighting
    - Proxy sends client a bunch of HTML
      - <noedit></noedit>?  Is there a standard way to do that?
    - Client renders HTML in an editing box
    - Updates and/or keystrokes are sent back to the proxy; proxy can
      send back updates with new HTML tags as well
    - Named colors would provide an easy way to configure color schemes
      at the client side (?)
  - Standardize Autofill EARLY
    > That is, if there's any ablity to fill out forms with things like
      name, address, etc., standardize the field names and implement an
      auto-fill method early on
  - Should be able to cache R-tree nodes (in the proxy, keeping them in
    cookies)
    - Just check the top-level node on the server; if the timestamp is
      the same as the cached one, no need to update any of the subnodes
  - Use PGP (or something similar) for authentication?  What's the legal
    status of that?
  x WibbleConfrobulator class
  - When graying out a menu item, give a reason for doing so; hovering
    over (or selecting) the menu item shows the reason
  - URLs should have spaces and other illegal chars removed in the
    address part, not converted to %XX
  - Distroversity!  The name is too good not to use
    > a.k.a. DVU (but this also refers to a far-right party in Germany)
    - Darc tutorials:
      > Will need to address objections to Lisp
        > Lack of syntax (explain that this may look confusing at first,
          but is quickly learned, and is related to many powerful
          abilities that other languages don't have)
        > Symbols seem like retarded strings (they are more like
          variable names -- don't think of them as strings)
      - For people who have never programmed before
      - For people with limited programming experience in one language
        - Visual Basic (see "never programmed before")
        - Java
        - Perl
        - Python
        - Lisp?
      - For people with extensive programming experience in various
        languages, but no Lisp (for shame!)
      - For Lisp hackers who have never tried Arc
      - For Arc hackers
        - The shortest and easiest one to write; do this first
  - Darc editor: paren/bracket coloring
    - Could do this strictly in the proxy, by updating html
    - Or perhaps bind ( to commands color/insert/send/color
  - Use bittorrent for downloading proxies?
    > Comes with default file to check for updates
    > User can add/remove index files of course
  - 2D mode, in which only GUI objects are valid (others ignored), for
    efficiency and to allow browser-like behavior
  x Distroplane: object scripting bytecode language
    > Distrocode?
    x Objects have properties, some of which can be attached bytecode
    x Message passing between objects
    x previous_object()->owner() and this_person(), just like LPMUD
    x Public/private/protected methods:
      x If a method is defined as public, it has property 'visibility =
        'public
      x Default message receiver in class Object does this when called
        for a message from another object:
        [method_object getProperty visibility]
        > Shorthand for (send method_object 'getProperty 'visibility)
        x If result is 'public, the method is called
        x If result is 'private, the method is not called
        x If result is 'protected,
          x Message receiver then checks whether the sender of the
            message is owned by the same user as itself; if so, method
            is called, else not
    > This idea has changed significantly; see notes
  - Configuration of new server:
    - Menu: World/Create/v1.0
      - Also have menu: World/Create/Email me version news...
        - Pops up window saying, "Would you like to be emailed when new
          versions of Distroplane are available?  Enter the address to
          which mail should be sent:" along with checkboxes:
          - Major stable versions (v1.0, v1.2, v2.0, etc.)
          - Minor stable versions (v1.0.8, v1.0.9, v1.2.0, etc.)
          - All minor versions (v1.0.8, v1.1.32, v1.1.33, v1.0.9, etc.)
    - Ask for name of world (should probably be renamable later)
    - Download Distroplane class, create a directory for it to run in
    - Start Distroplane with current user's public identity info set as
      Creator
    - Initially, only allow the Creator to connect
    - Connect to world; use in-world interface to set it up
      - An avatar with the Creator bit set can access all protected
        methods of every object automatically
      - A Creator connecting to a Distroplane sees the message, "You are
        the Creator of this world" with a "Renounce" button.  (Help
        question mark should explain that "renouncing" is temporary
        only, and that transferring of Creatorhood can be done through
        the World Configurator object, which is the only object floating
        in the void in a newly-created Distroplane, and which can be
        summoned again with World menu >> Summon Configurator)
  - Auto-compress groups of queue objects when the output queue gets
    full
  - (import object) or (import /path/object):
    - Calls something on object to get a list of functions to import
    - Defines each of them as /object/each
  - Check for /Volumes/USB Drive/Distroverse/my_identity.txt
    > So people can visit Internet cafes and plug in their little USB
      pen drives instead of typing a password.  Could even have some
      standardized way of generating one-time keys -- a button you press
      on the pendrive that generates a new key
      > Might not be so valuable, though -- most people would probably
        tend to avoid sketchy Inet cafes
  - .dvapp format
    - Standalone application that runs on the local machine and can
      access arbitrary remote hosts and ports; communicates with client
      using DVTP
    - Perhaps some sort of sandbox; pop up a warning dialog:
      - This application wants to connect to: *.foo.com
      - This application was (not) signed (by foo.com)
    - Also, give it a directory to play in, and don't allow it to go
      outside it
    - Except for generic file-open/save dialogs in the client
    - Extensions would be bound to the DV client, and it would have its
      own registry of extensions to .dvapps
      > This is unfortunate, but
      > They couldn't be bound to the .dvapp if that were itself a
        document type handled by the DV client
